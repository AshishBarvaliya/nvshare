generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id                String              @id @default(cuid())
    name              String
    email             String              @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    organizations     Organization[]
    projectAccess     ProjectAccess[]
    projects          Project[]
    environments      Environment[]
    commits           Commit[]
    environmentAccess EnvironmentAccess[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Organization {
    id        String   @id @default(cuid())
    userId    String
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    projects Project[]
    commits  Commit[]

    @@index([userId])
}

model Project {
    id             String   @id @default(cuid())
    organizationId String
    rootUserId     String
    name           String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    organization Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    users        ProjectAccess[]
    rootUser     User            @relation(fields: [rootUserId], references: [id])
    environments Environment[]
    commits      Commit[]

    @@index([rootUserId])
    @@index([organizationId])
}

model ProjectAccess {
    userId    String
    projectId String
    access    AccessType @default(READ)

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@id([userId, projectId])
    @@index([userId])
    @@index([projectId])
}

model Environment {
    id         String   @id @default(cuid())
    rootUserId String
    projectId  String
    name       String
    headId     String?  @unique
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    rootUser User                @relation(fields: [rootUserId], references: [id], onDelete: Cascade)
    project  Project             @relation(fields: [projectId], references: [id])
    commits  Commit[]
    head     Head?               @relation(fields: [headId], references: [id])
    users    EnvironmentAccess[]

    @@index([rootUserId])
    @@index([projectId])
}

model EnvironmentAccess {
    userId        String
    environmentId String
    access        AccessType @default(READ)

    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    environment Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

    @@id([userId, environmentId])
    @@index([userId])
    @@index([environmentId])
}

model Commit {
    id             String   @id @default(cuid())
    userId         String
    organizationId String
    projectId      String
    environmentId  String
    message        String
    version        String
    createdAt      DateTime @default(now())

    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
    environment  Environment  @relation(fields: [environmentId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([organizationId])
    @@index([projectId])
    @@index([environmentId])
}

model Head {
    id            String   @id @default(cuid())
    environmentId String
    message       String
    createdAt     DateTime @default(now())

    environment Environment?
}

enum AccessType {
    READ
    WRITE
}
